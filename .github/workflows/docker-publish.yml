name: Build and Push Image

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET 9.0.x
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore --configuration Release

    - name: Run tests
      run: dotnet test --no-build --verbosity normal --configuration Release

  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Harbor Registry
        uses: docker/login-action@v3
        with:
          registry: harbor.lag0.com.br
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_PASSWORD }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version and create tags
        id: vars
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == refs/tags/* ]]; then
            # Tag push - use the tag name
            RAW_TAG="${GITHUB_REF_NAME}"
            VERSION="${RAW_TAG#v}"
            echo "raw_tag=${RAW_TAG}" >> $GITHUB_OUTPUT
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
            echo "pr_tag=" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # PR - create PR-specific tag
            PR_NUMBER="${{ github.event.number }}"
            COMMIT_SHA="${GITHUB_SHA::8}"
            PR_TAG="pr-${PR_NUMBER}-${COMMIT_SHA}"
            echo "raw_tag=${PR_TAG}" >> $GITHUB_OUTPUT
            echo "version=${PR_TAG}" >> $GITHUB_OUTPUT
            echo "pr_tag=${PR_TAG}" >> $GITHUB_OUTPUT
          else
            # Branch push - use branch name and commit SHA
            BRANCH_NAME="${GITHUB_REF_NAME//\//-}"
            COMMIT_SHA="${GITHUB_SHA::8}"
            BRANCH_TAG="${BRANCH_NAME}-${COMMIT_SHA}"
            echo "raw_tag=${BRANCH_TAG}" >> $GITHUB_OUTPUT
            echo "version=${BRANCH_TAG}" >> $GITHUB_OUTPUT
            echo "pr_tag=" >> $GITHUB_OUTPUT
          fi

      - name: Build and push to GHCR (all scenarios)
        uses: docker/build-push-action@v6
        with:
          context: ./VaultwardenK8sSync
          file: ./VaultwardenK8sSync/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/vaultwarden-k8s-sync:latest
            ghcr.io/${{ github.repository_owner }}/vaultwarden-k8s-sync:${{ steps.vars.outputs.raw_tag }}
          cache-from: type=registry,ref=harbor.lag0.com.br/library/vaultwarden-k8s-sync:buildcache
          cache-to: type=registry,ref=harbor.lag0.com.br/library/vaultwarden-k8s-sync:buildcache,mode=max

      - name: Build and push PR-specific tag
        if: steps.vars.outputs.pr_tag != ''
        uses: docker/build-push-action@v6
        with:
          context: ./VaultwardenK8sSync
          file: ./VaultwardenK8sSync/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/vaultwarden-k8s-sync:${{ steps.vars.outputs.pr_tag }}
          cache-from: type=registry,ref=harbor.lag0.com.br/library/vaultwarden-k8s-sync:buildcache
          cache-to: type=registry,ref=harbor.lag0.com.br/library/vaultwarden-k8s-sync:buildcache,mode=max

      - name: Build and push to Harbor (non-PR only)
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v6
        with:
          context: ./VaultwardenK8sSync
          file: ./VaultwardenK8sSync/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            harbor.lag0.com.br/library/vaultwarden-k8s-sync:latest
            harbor.lag0.com.br/library/vaultwarden-k8s-sync:${{ steps.vars.outputs.raw_tag }}
            harbor.lag0.com.br/library/vaultwarden-k8s-sync:${{ steps.vars.outputs.version }}
          cache-from: type=registry,ref=harbor.lag0.com.br/library/vaultwarden-k8s-sync:buildcache
          cache-to: type=registry,ref=harbor.lag0.com.br/library/vaultwarden-k8s-sync:buildcache,mode=max

      # --- Helm Chart Publish to GHCR (OCI) ---
      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.14.4

      - name: Helm lint chart
        run: helm lint charts/vaultwarden-k8s-sync

      - name: Package Helm chart
        run: |
          mkdir -p dist
          helm package charts/vaultwarden-k8s-sync \
            --version "${{ steps.vars.outputs.version }}" \
            --app-version "${{ steps.vars.outputs.version }}" \
            --destination dist

      - name: Login to GHCR (Helm OCI)
        run: echo "${{ secrets.GITHUB_TOKEN }}" | helm registry login ghcr.io --username "${{ github.actor }}" --password-stdin

      - name: Push Helm chart to GHCR
        run: |
          CHART_FILE="dist/vaultwarden-k8s-sync-${{ steps.vars.outputs.version }}.tgz"
          helm push "$CHART_FILE" oci://ghcr.io/${{ github.repository_owner }}/charts
          helm push "$CHART_FILE" oci://harbor.lag0.com.br/charts

