name: Build and Push Image

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

jobs:
  build-and-test:
    name: Build and Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET 9.0.x
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build project
      run: dotnet build --no-restore --configuration Release

    - name: Run unit tests
      run: dotnet test --no-build --verbosity normal --configuration Release

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check for TODO comments
      run: |
        if grep -r "TODO" VaultwardenK8sSync/ --include="*.cs"; then
          echo "❌ Found TODO comments in source code - please resolve before merging"
          exit 1
        fi
        echo "✅ No TODO comments found"

    - name: Check for FIXME comments
      run: |
        if grep -r "FIXME" VaultwardenK8sSync/ --include="*.cs"; then
          echo "❌ Found FIXME comments in source code - please resolve before merging"
          exit 1
        fi
        echo "✅ No FIXME comments found"

  infrastructure-validation:
    name: Infrastructure Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Helm
      uses: azure/setup-helm@v4
      with:
        version: v3.14.4

    - name: Validate Helm chart structure
      run: |
        echo "🔍 Validating Helm chart structure..."
        helm lint charts/vaultwarden-k8s-sync
        echo "✅ Helm chart validation passed"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Validate Dockerfile syntax
      run: |
        echo "🔍 Validating Dockerfile syntax..."
        docker build --check -f VaultwardenK8sSync/Dockerfile VaultwardenK8sSync/
        echo "✅ Dockerfile validation passed"

  security:
    name: Security and Dependency Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET 9.0.x
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Check for vulnerable packages
      run: |
        echo "🔍 Checking for vulnerable NuGet packages..."
        dotnet list package --vulnerable
        echo "✅ Package vulnerability check completed"

    - name: Run dependency check
      run: |
        echo "🔍 Running dependency evaluation..."
        dotnet restore --force-evaluate
        echo "✅ Dependency check completed"

  build-and-push:
    runs-on: ubuntu-latest
    needs: [build-and-test, code-quality, infrastructure-validation, security]
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Harbor Registry
        uses: docker/login-action@v3
        with:
          registry: harbor.lag0.com.br
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_PASSWORD }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version and create tags
        id: vars
        run: |
           if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == refs/tags/* ]]; then
             # Tag push - use the tag name
             RAW_TAG="${GITHUB_REF_NAME}"
             VERSION="${RAW_TAG#v}"
             echo "raw_tag=${RAW_TAG}" >> $GITHUB_OUTPUT
             echo "version=${VERSION}" >> $GITHUB_OUTPUT
             echo "pr_tag=" >> $GITHUB_OUTPUT
             echo "is_release=true" >> $GITHUB_OUTPUT
           elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
             # PR - create PR-specific tag
             PR_NUMBER="${{ github.event.number }}"
             COMMIT_SHA="${GITHUB_SHA::8}"
             PR_TAG="pr-${PR_NUMBER}-${COMMIT_SHA}"
             echo "raw_tag=${PR_TAG}" >> $GITHUB_OUTPUT
             echo "version=0.0.0-pr${PR_NUMBER}" >> $GITHUB_OUTPUT
             echo "pr_tag=${PR_TAG}" >> $GITHUB_OUTPUT
             echo "is_release=false" >> $GITHUB_OUTPUT
           else
             # Branch push - use branch name and commit SHA
             BRANCH_NAME="${GITHUB_REF_NAME//\//-}"
             COMMIT_SHA="${GITHUB_SHA::8}"
             BRANCH_TAG="${BRANCH_NAME}-${COMMIT_SHA}"
             echo "raw_tag=${BRANCH_TAG}" >> $GITHUB_OUTPUT
             echo "version=0.0.0-${BRANCH_NAME}" >> $GITHUB_OUTPUT
             echo "pr_tag=" >> $GITHUB_OUTPUT
             echo "is_release=false" >> $GITHUB_OUTPUT
           fi

      - name: Build and push to GHCR (all scenarios)
        uses: docker/build-push-action@v6
        with:
          context: ./VaultwardenK8sSync
          file: ./VaultwardenK8sSync/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && format('ghcr.io/{0}/vaultwarden-k8s-sync:latest', github.repository_owner) || '' }}
            ghcr.io/${{ github.repository_owner }}/vaultwarden-k8s-sync:${{ steps.vars.outputs.raw_tag }}
          cache-from: type=registry,ref=harbor.lag0.com.br/library/vaultwarden-k8s-sync:buildcache
          cache-to: type=registry,ref=harbor.lag0.com.br/library/vaultwarden-k8s-sync:buildcache,mode=max

      - name: Build and push PR-specific tag
        if: steps.vars.outputs.pr_tag != ''
        uses: docker/build-push-action@v6
        with:
          context: ./VaultwardenK8sSync
          file: ./VaultwardenK8sSync/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/vaultwarden-k8s-sync:${{ steps.vars.outputs.pr_tag }}
          cache-from: type=registry,ref=harbor.lag0.com.br/library/vaultwarden-k8s-sync:buildcache
          cache-to: type=registry,ref=harbor.lag0.com.br/library/vaultwarden-k8s-sync:buildcache,mode=max

      - name: Build and push to Harbor (non-PR only)
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v6
        with:
          context: ./VaultwardenK8sSync
          file: ./VaultwardenK8sSync/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            harbor.lag0.com.br/library/vaultwarden-k8s-sync:latest
            harbor.lag0.com.br/library/vaultwarden-k8s-sync:${{ steps.vars.outputs.raw_tag }}
            harbor.lag0.com.br/library/vaultwarden-k8s-sync:${{ steps.vars.outputs.version }}
          cache-from: type=registry,ref=harbor.lag0.com.br/library/vaultwarden-k8s-sync:buildcache
          cache-to: type=registry,ref=harbor.lag0.com.br/library/vaultwarden-k8s-sync:buildcache,mode=max

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.14.4

      - name: Helm lint chart
        run: helm lint charts/vaultwarden-k8s-sync

      - name: Package Helm chart
        if: steps.vars.outputs.is_release == 'true'
        run: |
          mkdir -p dist
          helm package charts/vaultwarden-k8s-sync \
            --version "${{ steps.vars.outputs.version }}" \
            --app-version "${{ steps.vars.outputs.version }}" \
            --destination dist

      - name: Login to GHCR (Helm OCI)
        if: steps.vars.outputs.is_release == 'true'
        run: echo "${{ secrets.GITHUB_TOKEN }}" | helm registry login ghcr.io --username "${{ github.actor }}" --password-stdin

      - name: Push Helm chart to GHCR
        if: steps.vars.outputs.is_release == 'true'
        run: |
          CHART_FILE="dist/vaultwarden-k8s-sync-${{ steps.vars.outputs.version }}.tgz"
          helm push "$CHART_FILE" oci://ghcr.io/${{ github.repository_owner }}/charts
          helm push "$CHART_FILE" oci://harbor.lag0.com.br/charts

  comment-pr:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository
    permissions:
      contents: read
      pull-requests: write
      issues: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate PR tag
        id: vars
        run: |
          PR_NUMBER="${{ github.event.number }}"
          COMMIT_SHA="${GITHUB_SHA::8}"
          PR_TAG="pr-${PR_NUMBER}-${COMMIT_SHA}"
          echo "pr_tag=${PR_TAG}" >> $GITHUB_OUTPUT

      - name: Comment on PR with Docker image info
        uses: actions/github-script@v7
        with:
          script: |
            const commentBody = `PR Docker Image Ready for Testing

            Build Status: Successfully built and pushed Docker image for this PR

            Docker Image: ghcr.io/${context.repo.owner}/vaultwarden-k8s-sync:${process.env.PR_TAG}

            How to Test:
            1. Update your deployment to use this image:
              image: ghcr.io/${context.repo.owner}/vaultwarden-k8s-sync:${process.env.PR_TAG}

            2. Or update your Helm values:
              image:
                repository: ghcr.io/${context.repo.owner}/vaultwarden-k8s-sync
                tag: ${process.env.PR_TAG}

            3. Or use kubectl to update existing deployment:
              kubectl set image deployment/vaultwarden-k8s-sync vaultwarden-k8s-sync=ghcr.io/${context.repo.owner}/vaultwarden-k8s-sync:${process.env.PR_TAG}

            Note: This image contains the changes from this PR and is ready for testing. The image will be automatically cleaned up after the PR is closed or merged.

            ---
            Last updated: ${new Date().toISOString()}
            Build SHA: ${process.env.GITHUB_SHA}`;

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            // Check if we already commented on this PR
            const existingComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('PR Docker Image Ready for Testing')
            );
            
            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: commentBody
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }
        env:
          PR_TAG: ${{ steps.vars.outputs.pr_tag }}

      - name: Add PR image info to PR description
        uses: actions/github-script@v7
        with:
          script: |
            const dockerInfoSection = `## Docker Image for Testing

            This PR includes a pre-built Docker image for easy testing:

            Image: ghcr.io/${context.repo.owner}/vaultwarden-k8s-sync:${process.env.PR_TAG}

            Quick Test Command:
            kubectl set image deployment/vaultwarden-k8s-sync vaultwarden-k8s-sync=ghcr.io/${context.repo.owner}/vaultwarden-k8s-sync:${process.env.PR_TAG}

            ---
            `;
            
            // Add a summary to the PR description if it doesn't already have Docker info
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            if (!pr.data.body || !pr.data.body.includes('Docker Image for Testing')) {
              const newBody = pr.data.body ? `${pr.data.body}\n\n${dockerInfoSection}` : dockerInfoSection;
              
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                body: newBody
              });
            }
        env:
          PR_TAG: ${{ steps.vars.outputs.pr_tag }}
